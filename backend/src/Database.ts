//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { LawsEntity } from './db/Laws.entity';
import { LawTypesEntity } from './db/LawTypes.entity';
import { LanguagesEntity } from './db/Languages.entity';
import { UserEntity } from './db/User.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      LawsEntity,
      LawTypesEntity,
      LanguagesEntity,
      UserEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Laws: [
        {
          Title: 'Title 1',
          Description: 'Description 1',
          EffectiveDate: '2024-09-25T19:03:41.629Z',
          Keywords: 'Keywords 1',
          id: 0,
        },
        {
          Title: 'Title 2',
          Description: 'Description 2',
          EffectiveDate: '2023-11-29T03:32:52.203Z',
          Keywords: 'Keywords 2',
          id: 1,
        },
        {
          Title: 'Title 3',
          Description: 'Description 3',
          EffectiveDate: '2024-07-20T11:54:28.989Z',
          Keywords: 'Keywords 3',
          id: 70,
        },
        {
          Title: 'Title 4',
          Description: 'Description 4',
          EffectiveDate: '2024-09-22T19:57:30.287Z',
          Keywords: 'Keywords 4',
          id: 80,
        },
        {
          Title: 'Title 5',
          Description: 'Description 5',
          EffectiveDate: '2025-02-20T02:06:32.861Z',
          Keywords: 'Keywords 5',
          id: 18,
        },
      ],
      LawTypes: [
        { Name: 'Name 1', Description: 'Description 1', id: 27 },
        { Name: 'Name 2', Description: 'Description 2', id: 72 },
        { Name: 'Name 3', Description: 'Description 3', id: 14 },
        { Name: 'Name 4', Description: 'Description 4', id: 60 },
        { Name: 'Name 5', Description: 'Description 5', id: 38 },
      ],
      Languages: [
        { Name: 'Name 1', Code: 'Code 1', id: 93 },
        { Name: 'Name 2', Code: 'Code 2', id: 74 },
        { Name: 'Name 3', Code: 'Code 3', id: 41 },
        { Name: 'Name 4', Code: 'Code 4', id: 30 },
        { Name: 'Name 5', Code: 'Code 5', id: 56 },
      ],
      User: [
        {
          Username: 'Username 1',
          Email: 'Email 1',
          Password: 'Password 1',
          PreferredLanguage: 1,
          id: 92,
        },
        {
          Username: 'Username 2',
          Email: 'Email 2',
          Password: 'Password 2',
          PreferredLanguage: 2,
          id: 78,
        },
        {
          Username: 'Username 3',
          Email: 'Email 3',
          Password: 'Password 3',
          PreferredLanguage: 3,
          id: 15,
        },
        {
          Username: 'Username 4',
          Email: 'Email 4',
          Password: 'Password 4',
          PreferredLanguage: 4,
          id: 91,
        },
        {
          Username: 'Username 5',
          Email: 'Email 5',
          Password: 'Password 5',
          PreferredLanguage: 5,
          id: 0,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('LawsEntity', data.Laws);
      await this.SeedResource('LawTypesEntity', data.LawTypes);
      await this.SeedResource('LanguagesEntity', data.Languages);
      await this.SeedResource('UserEntity', data.User);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
